import { addLog, showApiStatus } from './logger.js';
import { apiKey, selectedModel, saveSetting, loadSetting } from './storage.js';
import { extractJsonFromMarkdown, loadFile } from './utils.js';
import { showStoryText, setStoryText } from './story.js';
import { DOMManager } from './modules/domManager.js';
import { Player } from './modules/Player.js';
import { callOpenRouterAPI, initializeSessionWithAI, continueConversationWithAI, reformatResponseToJSON } from './api.js';

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let player = new Player();
let domManager = new DOMManager();
let sessionInitialized = false;
let conversationHistory = [];

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ===
window.onload = async () => {
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  setStoryText('–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é".');

  domManager.updateChoiceArea();
  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
  const storyPrompt = document.getElementById('init-story-prompt');
  if (storyPrompt) {
    const saved = loadSetting();
    if (saved) {
      storyPrompt.value = saved;
    } else {
      storyPrompt.value = await loadFile('default_setting.txt');
    }
    storyPrompt.addEventListener('input', saveSetting);
  }
  // –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
  setStoryText('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D Game!\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–µ—Ç—Ç–∏–Ω–≥—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".');
  // –ö–Ω–æ–ø–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≥–ª–∞–≤–Ω–∞—è)
  const initSessionMain = document.getElementById('init-session-main');
  if (initSessionMain) {
    initSessionMain.onclick = async () => {
      domManager.updateChoiceArea(true);
      await initializeSession();
      domManager.updateChoiceArea();
      const storyPrompt = document.getElementById('init-story-prompt');
      if (storyPrompt) {
        storyPrompt.value = await loadFile('default_setting.txt');
        saveSetting();
      }
    };
  }
};


// === –†–∞–±–æ—Ç–∞ —Å OpenRouter API ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
async function initializeSession() {
  if (!apiKey) {
    showApiStatus('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (üõ†Ô∏è –≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞)', 'error');
    addLog('–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω', 'error');
    domManager.updateChoiceArea();
    return;
  }

  showApiStatus('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏...', 'loading');
  addLog('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é', 'info');
  addLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${selectedModel}`, 'debug');

  const systemPrompt = await loadFile('prompt.txt');
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è/–ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é
  let userPrompt = "–°–æ–∑–¥–∞–π –≤–≤–æ–¥–Ω—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D. –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.";
  const storyPrompt = document.getElementById('init-story-prompt');
  if (storyPrompt && storyPrompt.value.trim()) {
    userPrompt += "\n\n–ü–æ–∂–µ–ª–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞: " + storyPrompt.value.trim();
  }

  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + JSON.stringify(userPrompt), 'info');

    const response = await initializeSessionWithAI(systemPrompt, userPrompt);

    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response, 'debug');

      sessionInitialized = true;
      window.sessionInitialized = true;
      domManager.updateChoiceArea();
        conversationHistory = [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        { role: "assistant", content: response }
        ];
      
      showApiStatus(`‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é ${selectedModel}! –ù–∞–∂–º–∏—Ç–µ \"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É\"`, 'success');
      addLog('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
      setTimeout(() => {
        loadSceneFromAI();
      }, 1000);
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    domManager.updateChoiceArea();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async function loadSceneFromAI() {
  if (!sessionInitialized) {
    showApiStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é', 'error');
    addLog('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'error');
    domManager.updateChoiceArea();
    return;
  }

  showApiStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'info');

  domManager.updateChoiceArea(true);
  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"–ó–∞–≥—Ä—É–∑–∏ —Å—Ü–µ–Ω—É\"', 'info');
    
    const response = await continueConversationWithAI(conversationHistory);
    
    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response, 'debug');
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      let sceneData;
      try {
        sceneData = JSON.parse(extractJsonFromMarkdown (response));
        addLog('JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω', 'success');
    } catch (e) {
        addLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'warning');
        addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D.\"', 'info');
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        const reformatResponse = await reformatResponseToJSON(conversationHistory);
        addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, ${reformatResponse.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
  addLog(reformatResponse, 'debug');
        sceneData = JSON.parse(reformatResponse);
        addLog('JSON –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      conversationHistory.push({ role: "assistant", content: response });
      
      // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ü–µ–Ω—É
      addLog('–†–µ–Ω–¥–µ—Ä–∏–º —Å—Ü–µ–Ω—É...', 'debug');
      renderScene(sceneData);
      showApiStatus('‚úÖ –°—Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');
      addLog('–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', 'success');
      domManager.updateChoiceArea();
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
    domManager.updateChoiceArea();
  }
}

// === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ü–µ–Ω—ã ===
function renderScene(data) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
  if (data.player) {
    player.update(data.player);
    domManager.updatePlayerData(data.player);
  }

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  domManager.updateTitles({
    title: data.title,
    subtitle: data.subtitle
  });

  // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  domManager.renderAbilities(data.abilities || []);

  // –í—Ä–∞–≥
  domManager.renderEnemy(data.enemy);

  // –¢–µ–∫—Å—Ç
  showStoryText(data.text || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.', () => {
    // –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if (window.sessionInitialized) {
      domManager.renderChoices(data.choices || []);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      function sendAction() {
        const actionText = domManager.getInputValue();
        if (!actionText) return;
        domManager.clearChoices();
        domManager.updateChoiceArea(true);
        sendTextActionToAI(actionText, () => {
          domManager.updateChoiceArea();
        });
      }
      
      domManager.setChoiceHandlers(sendAction, e => {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendAction();
        }
      });
    }
  });
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
async function sendTextActionToAI(actionText, onError) {
  showApiStatus('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog(`–ò–≥—Ä–æ–∫ –≤–≤—ë–ª –¥–µ–π—Å—Ç–≤–∏–µ: \"${actionText}\"`, 'info');
  conversationHistory.push({
    role: "user",
    content: `–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: ${actionText}. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${JSON.stringify(player.toJSON(), null, 2)}. –°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞.`
  });
  domManager.updateChoiceArea(true);
  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    const response = await continueConversationWithAI(conversationHistory);
    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response, 'debug');
      let sceneData;
      try {
        sceneData = JSON.parse(extractJsonFromMarkdown(response));
        addLog('JSON –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω', 'success');
      } catch (e) {
        addLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'warning');
        addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D.\"', 'info');
        const reformatResponse = await reformatResponseToJSON(conversationHistory);
        addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, ${reformatResponse.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
  addLog(reformatResponse, 'debug');
        sceneData = JSON.parse(reformatResponse);
        addLog('JSON –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
      }
      conversationHistory.push({ role: "assistant", content: response });
      addLog('–†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É...', 'debug');
      renderScene(sceneData);
      showApiStatus('‚úÖ –°—Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
      addLog('–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞', 'success');
      domManager.updateChoiceArea();
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'error');
    if (typeof onError === 'function') onError();
    domManager.updateChoiceArea();
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ DM –ø–∞–Ω–µ–ª–∏
domManager.setDMPanelHandlers();

// –ü–∞–Ω–µ–ª—å DM overlay toggle
const toggleDMBtn = document.getElementById('toggle-dm-panel');
const dmOverlay = document.getElementById('dm-overlay');
if (toggleDMBtn && dmOverlay) {
  toggleDMBtn.onclick = () => {
      dmOverlay.style.display = 'flex';
  };
  dmOverlay.onclick = (e) => {
      if (e.target === dmOverlay) {
      dmOverlay.style.display = 'none';
      }
  };
}