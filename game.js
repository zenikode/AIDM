import { addLog, showApiStatus } from './logger.js';
import { apiKey, selectedModel, saveSetting, loadSetting, saveGameState, loadGameState } from './storage.js';
import { loadFile } from './utils.js';
import { callOpenRouterAPI } from './api.js';
import { DOMManager } from './modules/domManager.js';
import { Player } from './modules/Player.js';
import { SceneMediator } from './modules/SceneMediator.js';

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let player = new Player();
let domManager = new DOMManager();
let sceneMediator = new SceneMediator();
let sessionInitialized = false;
let conversationHistory = [];
let chatHistoryCleared = false; // <--- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
window.chatMessages = []; // Global array to track chat messages for saving
let currentScene = null; // Track current scene UI data

// Function to save current game state
function saveCurrentState() {
  const state = {
    player: player.toJSON(),
    conversationHistory: sceneMediator.getConversationHistory(),
    chatMessages: window.chatMessages,
    currentScene: currentScene
  };
  saveGameState(state);
  addLog('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage', 'info');
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ===
window.onload = async () => {

  domManager.updateChoiceArea();

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ DM –ø–∞–Ω–µ–ª–∏
  domManager.setDMPanelHandlers();

  // Load saved game state if exists
  const savedState = loadGameState();
  if (savedState) {
    // Restore state
    player.update(savedState.player);
    domManager.updatePlayerData(savedState.player);
    sceneMediator.setConversationHistory(savedState.conversationHistory);
    window.chatMessages = savedState.chatMessages || []; // Restore global chat messages array
    domManager.restoreChatHistory(savedState.chatMessages);
    
    sessionInitialized = true;
    window.sessionInitialized = true;
    chatHistoryCleared = true;
    currentScene = savedState.currentScene || null;
    
    domManager.hideWelcome();
    domManager.updateChoiceArea();
    
    // Restore UI from currentScene
    if (currentScene) {
      domManager.updateTitles(currentScene);
      domManager.renderAbilities(currentScene.abilities || savedState.player.abilities || []);
      domManager.renderEnemy(currentScene.enemy || []); // Ensure enemy is array
      domManager.renderChoices(currentScene.choices || []);
      
      // Setup choice handlers manually
      const sendAction = () => {
        const actionText = domManager.getInputValue();
        if (!actionText) return;
        domManager.clearChoices();
        domManager.updateChoiceArea(true);
        sendTextActionToAI(actionText, () => {
          domManager.updateChoiceArea();
        });
      };
      
      domManager.setChoiceHandlers(sendAction, e => {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendAction();
        }
      });
    }
    
    // Update titles if available from last scene, but since no last scene data, perhaps load last scene or just show restored
    addLog('–ò–≥—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'success');
    showApiStatus('‚úÖ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'success');
    
    domManager.toggleClearButton(true); // Show button when loading save
  } else {
    // –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç - replaced with welcome screen
    domManager.showWelcome();
    domManager.toggleClearButton(false); // Ensure hidden on fresh load

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    const storyPrompt = document.getElementById('init-story-prompt');
    if (storyPrompt) {
      const saved = loadSetting();
      let defaultSetting = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–∏—Ä–µ D&D —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –±–æ—è –∏ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã.';
      if (saved) {
        storyPrompt.value = saved;
      } else {
        try {
          const fileContent = await loadFile('default_setting.txt');
          if (fileContent && fileContent.trim()) {
            storyPrompt.value = fileContent.trim();
          } else {
            storyPrompt.value = defaultSetting;
          }
        } catch (error) {
          console.warn('Failed to load default_setting.txt:', error);
          storyPrompt.value = defaultSetting;
        }
      }
      // Fix: pass value instead of event
      storyPrompt.addEventListener('input', () => saveSetting(storyPrompt.value));
    }
  }
  // –ö–Ω–æ–ø–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≥–ª–∞–≤–Ω–∞—è)
  const initSessionMain = document.getElementById('init-session-main');
  if (initSessionMain) {
    initSessionMain.onclick = async () => {
      await initializeSession();
    };
  }

  // Clear session button handler
  const clearSessionBtn = document.getElementById('clear-session');
  if (clearSessionBtn) {
    clearSessionBtn.onclick = async () => {
      await clearSession();
    };
  }
};


// === –†–∞–±–æ—Ç–∞ —Å OpenRouter API ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
async function initializeSession() {
  domManager.updateChoiceArea(true);
  if (!apiKey) {
    showApiStatus('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (üõ†Ô∏è –≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞)', 'error');
    addLog('–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω', 'error');
    domManager.updateChoiceArea();
    return;
  }

  showApiStatus('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏...', 'loading');
  addLog('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é', 'info');
  addLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${selectedModel}`, 'debug');

  const systemPrompt = await loadFile('prompt.txt');
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è/–ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é
  let userPrompt = "–°–æ–∑–¥–∞–π –≤–≤–æ–¥–Ω—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D. –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.";
  const storyPrompt = document.getElementById('init-story-prompt');
  if (storyPrompt && storyPrompt.value.trim()) {
    userPrompt += "\n\n–ü–æ–∂–µ–ª–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞: " + storyPrompt.value.trim();
  }

  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞—Ç–æ—Ä...', 'debug');
    addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + JSON.stringify(userPrompt), 'info');

    const sceneData = await sceneMediator.initializeSession(systemPrompt, userPrompt);

    if (sceneData) {
      addLog('–ú–µ–¥–∏–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Å–µ—Å—Å–∏—é –∏ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É', 'success');
      
      sessionInitialized = true;
      window.sessionInitialized = true;
      
      if (!chatHistoryCleared) {
        domManager.clearChatHistory();
        chatHistoryCleared = true;
      }
      
      domManager.updateChoiceArea();
      
      showApiStatus(`‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é ${selectedModel}!`, 'success');
      addLog('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞', 'success');
      
      // Append initial AI scene with animation and choices after
      renderScene(sceneData);
      
      // Hide welcome after first message
      domManager.hideWelcome();
      domManager.toggleClearButton(true); // Show clear button
      saveCurrentState();
    } else {
      showApiStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é', 'error');
      addLog('–ú–µ–¥–∏–∞—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ü–µ–Ω—É', 'error');
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    domManager.updateChoiceArea();
  }
  domManager.updateChoiceArea();
}

// New function to generate session summary
async function generateSummary() {
  if (window.chatMessages.length === 0) {
    return '–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é D&D!';
  }

  const simpleSummary = `–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è: ${player.name || '–ì–µ—Ä–æ–π'} –≤ ${currentScene?.title || '—Ñ—ç–Ω—Ç–µ–∑–∏–π–Ω–æ–º –º–∏—Ä–µ'}, —Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏: ${currentScene?.abilities?.map(a => a.name).join(', ') || '–±–∞–∑–æ–≤—ã–º–∏'}.`;

  if (!apiKey) {
    addLog('API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤—ã–∂–∏–º–∫—É', 'info');
    return simpleSummary;
  }

  try {
    // Use full history for complete summary
    const historyText = window.chatMessages.map(msg => 
      msg.type === 'player' ? `–ò–≥—Ä–æ–∫: ${msg.content}` : `AI: ${msg.content}`
    ).join('\n');

    const summaryPrompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏–∑ –≤—Å–µ–π —ç—Ç–æ–π D&D —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–º–µ–Ω–æ–≤:\n${historyText}`;

    const messages = [
      { role: "system", content: "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è D&D. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ summaries –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è." },
      { role: "user", content: summaryPrompt }
    ];

    const summary = await callOpenRouterAPI(messages);
    addLog('–í—ã–∂–∏–º–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ AI –∏–∑ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏', 'success');
    return summary.trim() || simpleSummary;
  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–∂–∏–º–∫–∏: ${error.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é`, 'warning');
    return simpleSummary;
  }
}

// Function to clear session (now async)
async function clearSession() {
  // Generate summary before clearing
  const summary = await generateSummary();
  const storyPrompt = document.getElementById('init-story-prompt');
  if (storyPrompt) {
    storyPrompt.value = summary;
    saveSetting(summary);
  }

  // Clear game state
  localStorage.removeItem('dnd_game_state');
  
  // Clear chat and history
  domManager.clearChatHistory();
  sceneMediator.clearHistory();
  
  // Reset variables
  sessionInitialized = false;
  window.sessionInitialized = false;
  chatHistoryCleared = false;
  window.chatMessages = [];
  player = new Player();
  currentScene = null;
  domManager.updatePlayerData(player);
  
  // Show welcome
  domManager.showWelcome();
  domManager.updateChoiceArea();
  domManager.toggleClearButton(false); // Hide button after clear

  // Clear enemy, abilities, etc.
  domManager.renderEnemy(null); // Clear all enemies
  domManager.renderAbilities([]);
  domManager.updateTitles({});
  
  showApiStatus('‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞, –≤—ã–∂–∏–º–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é', 'success');
  addLog('–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ —Å –≤—ã–∂–∏–º–∫–æ–π', 'info');
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
async function sendTextActionToAI(actionText, onError) {
  showApiStatus('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog(`–ò–≥—Ä–æ–∫ –≤–≤—ë–ª –¥–µ–π—Å—Ç–≤–∏–µ: "${actionText}"`, 'info');
  
  domManager.updateChoiceArea(true);
  
  // Append player action to history
  domManager.appendPlayerMessage(actionText);
  
  domManager.clearInput(); // Clear input after sending
  
  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞—Ç–æ—Ä...', 'debug');
    const sceneData = await sceneMediator.sendPlayerAction(actionText, player.toJSON());
    
    if (sceneData) {
      addLog('–ú–µ–¥–∏–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞', 'success');
      renderScene(sceneData);
      domManager.updateChoiceArea();
      
      // Save state after action
      saveCurrentState();
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'error');
    if (typeof onError === 'function') onError();
    domManager.updateChoiceArea();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async function loadSceneFromAI() {
  if (!sessionInitialized) {
    showApiStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é', 'error');
    addLog('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'error');
    domManager.updateChoiceArea();
    return;
  }

  showApiStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞—Ç–æ—Ä...', 'info');

  domManager.updateChoiceArea(true);
  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞—Ç–æ—Ä...', 'debug');
    
    const sceneData = await sceneMediator.loadScene();
    
    if (sceneData) {
      addLog('–ú–µ–¥–∏–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª —Å—Ü–µ–Ω—É', 'success');
      renderScene(sceneData);
      domManager.updateChoiceArea();
      
      // Save state after load
      saveCurrentState();
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
    domManager.updateChoiceArea();
  }
}

// === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ü–µ–Ω—ã ===
function renderScene(data) {
  addLog('–†–µ–Ω–¥–µ—Ä–∏–º —Å—Ü–µ–Ω—É...', 'debug');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
  if (data.player) {
    player.update(data.player);
    domManager.updatePlayerData(data.player);
  }

  // Append AI scene with animation, callback renders choices
  domManager.appendAIMessage(data, () => {
    // –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Å –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if (window.sessionInitialized) {
      domManager.renderChoices(data.choices || []);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      function sendAction() {
        const actionText = domManager.getInputValue();
        if (!actionText) return;
        domManager.clearChoices();
        domManager.updateChoiceArea(true);
        sendTextActionToAI(actionText, () => {
          domManager.updateChoiceArea();
        });
      }
      
      domManager.setChoiceHandlers(sendAction, e => {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendAction();
        }
      });
    }
  });

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  domManager.updateTitles({
    title: data.title,
    subtitle: data.subtitle
  });

  // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  domManager.renderAbilities(data.abilities || []);

  // –í—Ä–∞–≥ - ensure array
  const enemies = Array.isArray(data.enemy) ? data.enemy : (data.enemy ? [data.enemy] : []);
  domManager.renderEnemy(enemies);

  // Save state after rendering scene
  saveCurrentState();
  
  // Set currentScene - enemy as array
  currentScene = {
    title: data.title,
    subtitle: data.subtitle,
    abilities: data.abilities || [],
    enemy: enemies, // Save as array
    choices: data.choices || []
  };
}

// Optional: Clear history on new session if desired, but keep persistent by default