// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let player = {};
let currentSceneId = 'start';
let apiKey = 'sk-or-v1-1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'; // –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let selectedModel = 'deepseek/deepseek-chat-v3.1:free'; // –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let sessionInitialized = false;
let conversationHistory = [];

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage ===
function saveSettings() {
  localStorage.setItem('dnd_api_key', apiKey);
  localStorage.setItem('dnd_model', selectedModel);
}

function loadSettings() {
  const savedApiKey = localStorage.getItem('dnd_api_key');
  const savedModel = localStorage.getItem('dnd_model');
  
  if (savedApiKey) {
    apiKey = savedApiKey;
  }
  if (savedModel) {
    selectedModel = savedModel;
  }
}

function extractJsonFromMarkdown(markdown) {
  // –®–∞–≥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å—Ç—ã–π JSON)
  try {
    const parsed = JSON.parse(markdown.trim());
    return parsed; // –£—Å–ø–µ—à–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç
  } catch (e) {
    // –ù–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ Markdown-–±–ª–æ–∫–∞—Ö
  }

  // –®–∞–≥ 2: –ò—â–µ–º –∫–æ–¥-–±–ª–æ–∫–∏ —Å json
  const jsonCodeBlockRegex = /```(?:json|JSON)\s*([\s\S]*?)\s*```/g;
  let match;

  while ((match = jsonCodeBlockRegex.exec(markdown)) !== null) {
    const jsonStr = match[1].trim();

    try {
      const parsed = JSON.parse(jsonStr);
      return parsed; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON
    } catch (e) {
      console.warn('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –±–ª–æ–∫–µ:', jsonStr.substring(0, 100) + '...');
    }
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  return null;
}

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å—é –ª–æ–≥–æ–≤ ===
function addLog(message, type = 'info') {
  const consoleLogs = document.getElementById('console-logs');
  if (!consoleLogs) return;

  const timestamp = new Date().toLocaleTimeString();
  const logEntry = document.createElement('div');
  logEntry.className = `log-entry log-${type}`;
  
  const typeIcon = {
    'info': '‚ÑπÔ∏è',
    'success': '‚úÖ',
    'error': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'debug': 'üîç'
  }[type] || '‚ÑπÔ∏è';
  
  logEntry.innerHTML = `<span class="log-time">[${timestamp}]</span> <span class="log-icon">${typeIcon}</span> <span class="log-message">${message}</span>`;
  
  consoleLogs.appendChild(logEntry);
  consoleLogs.scrollTop = consoleLogs.scrollHeight;
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
  const logs = consoleLogs.querySelectorAll('.log-entry');
  if (logs.length > 100) {
    logs[0].remove();
  }
}

function clearLogs() {
  const consoleLogs = document.getElementById('console-logs');
  if (consoleLogs) {
    consoleLogs.innerHTML = '<div class="log-entry">–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã...</div>';
  }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ===
window.onload = () => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  loadSettings();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  const storyText = document.getElementById('story-text');
  if (storyText) {
    storyText.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é".';
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  const initButton = document.getElementById('init-session');
  const loadSceneButton = document.getElementById('load-scene');
  const clearLogsButton = document.getElementById('clear-logs');
  
  if (initButton) {
    initButton.addEventListener('click', initializeSession);
  }
  
  if (loadSceneButton) {
    loadSceneButton.addEventListener('click', loadSceneFromAI);
  }
  
  if (clearLogsButton) {
    clearLogsButton.addEventListener('click', clearLogs);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
  const apiKeyInput = document.getElementById('api-key');
  if (apiKeyInput) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–ª–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –∫–ª—é—á
    apiKeyInput.value = apiKey;
    apiKeyInput.addEventListener('input', (e) => {
      apiKey = e.target.value;
      saveSettings(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
  const modelInput = document.getElementById('model-input');
  if (modelInput) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    modelInput.value = selectedModel;
    modelInput.addEventListener('input', (e) => {
      selectedModel = e.target.value;
      saveSettings(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      console.log('–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:', selectedModel);
    });
  }
};


// === –†–∞–±–æ—Ç–∞ —Å OpenRouter API ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
async function initializeSession() {
  if (!apiKey) {
    showApiStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenRouter', 'error');
    addLog('–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω', 'error');
    return;
  }

  showApiStatus('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏...', 'loading');
  addLog('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é', 'info');
  addLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${selectedModel}`, 'debug');

  const systemPrompt = `–¢—ã - –º–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π (DM) –¥–ª—è –∏–≥—Ä—ã D&D. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –°–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
2. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—ã–±–æ—Ä—ã –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ–≤—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏
3. –í–µ–¥–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

–§–û–†–ú–ê–¢ –°–¶–ï–ù–´ (JSON):
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã",
  "subtitle": "–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
  "text": "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π",
  "choices": [
    {"id": "choice1", "text": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞"}
  ],
  "player": {
    "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
    "str": 15, "dex": 12, "con": 14, "int": 10, "wis": 13, "cha": 11,
    "hp": 20, "mp": 10
  },
  "stats": {
    "visible": true,
    "icons": ["üí™", "ü§∏", "üõ°Ô∏è", "üß†", "ü¶â", "üé≠"],
    "labels": ["–°–∏–ª–∞", "–õ–æ–≤–∫–æ—Å—Ç—å", "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ú—É–¥—Ä–æ—Å—Ç—å", "–•–∞—Ä–∏–∑–º–∞"]
  },
  "abilities": [
    {"icon": "‚öîÔ∏è", "name": "–ê—Ç–∞–∫–∞", "desc": "–£—Ä–æ–Ω: 5"},
    {"icon": "üí∞", "name": "–ó–æ–ª–æ—Ç–æ", "desc": "–ú–æ–Ω–µ—Ç—ã: 100"},
    {"icon": "üß™", "name": "–ó–µ–ª—å—è", "desc": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3"}
  ]
}

–ù–∞—á–Ω–∏ —Å –≤–≤–æ–¥–Ω–æ–π —Å—Ü–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. 

–û—Ç–≤–µ—á–∞–π json —Ñ–∞–π–ª–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏. `;

  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–°–æ–∑–¥–∞–π –≤–≤–æ–¥–Ω—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D. –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."', 'info');
    
    const response = await callOpenRouterAPI([
      { role: "system", content: systemPrompt },
      { role: "user", content: "–°–æ–∑–¥–∞–π –≤–≤–æ–¥–Ω—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D. –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è." }
    ]);

    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response.substring(0, 500) + (response.length > 500 ? '...' : ''), 'debug');
      
      sessionInitialized = true;
      conversationHistory = [
        { role: "system", content: systemPrompt },
        { role: "user", content: "–°–æ–∑–¥–∞–π –≤–≤–æ–¥–Ω—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D. –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è." },
        { role: "assistant", content: response }
      ];
      
      showApiStatus(`‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é ${selectedModel}! –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É"`, 'success');
      addLog('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
      setTimeout(() => {
        loadSceneFromAI();
      }, 1000);
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async function loadSceneFromAI() {
  if (!sessionInitialized) {
    showApiStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é', 'error');
    addLog('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'error');
    return;
  }

  showApiStatus('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'info');

  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–ó–∞–≥—Ä—É–∑–∏ —Å—Ü–µ–Ω—É"', 'info');
    
    const response = await callOpenRouterAPI(conversationHistory);
    
    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response.substring(0, 500) + (response.length > 500 ? '...' : ''), 'debug');
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      let sceneData;
      try {
        sceneData = JSON.parse(extractJsonFromMarkdown (response));
        addLog('JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω', 'success');
    } catch (e) {
        addLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'warning');
        addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D."', 'info');
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        const reformatResponse = await callOpenRouterAPI([
          ...conversationHistory,
          { role: "user", content: "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D." }
        ]);
        addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, ${reformatResponse.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
        addLog(reformatResponse.substring(0, 500) + (reformatResponse.length > 500 ? '...' : ''), 'debug');
        sceneData = JSON.parse(reformatResponse);
        addLog('JSON –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      conversationHistory.push({ role: "assistant", content: response });
      
      // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ü–µ–Ω—É
      addLog('–†–µ–Ω–¥–µ—Ä–∏–º —Å—Ü–µ–Ω—É...', 'debug');
      renderScene(sceneData);
      showApiStatus('‚úÖ –°—Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');
      addLog('–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', 'success');
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã: ${error.message}`, 'error');
  }
}

// –í—ã–∑–æ–≤ OpenRouter API
async function callOpenRouterAPI(messages) {
  addLog(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API (–º–æ–¥–µ–ª—å: ${selectedModel})`, 'debug');
  
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': window.location.origin,
      'X-Title': 'D&D Game Interface'
    },
    body: JSON.stringify({
      model: selectedModel,
      messages: messages,
      temperature: 0.8,
      max_tokens: 2000
    })
  });

  addLog(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: HTTP ${response.status}`, 'debug');

  if (!response.ok) {
    const errorText = await response.text();
    addLog(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`, 'error');
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  const data = await response.json();
  addLog('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', 'success');
  return data.choices[0].message.content;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å API
function showApiStatus(message, type = 'info') {
  const statusDiv = document.getElementById('api-status');
  if (statusDiv) {
    statusDiv.textContent = message;
    statusDiv.className = `api-status ${type}`;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async function sendChoiceToAI(choice) {
  showApiStatus('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'loading');
  addLog(`–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª: "${choice.text}" (ID: ${choice.id})`, 'info');

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é
  conversationHistory.push({
    role: "user", 
    content: `–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª: "${choice.text}" (ID: ${choice.id}). –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${JSON.stringify(player, null, 2)}. –°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞.`
  });

  try {
    addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...', 'debug');
    const userMessage = `–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª: "${choice.text}" (ID: ${choice.id}). –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${JSON.stringify(player, null, 2)}. –°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞.`;
    addLog(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userMessage.substring(0, 200)}..."`, 'info');
    
    const response = await callOpenRouterAPI(conversationHistory);
    
    if (response) {
      addLog('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞', 'success');
      addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (${response.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
      addLog(response.substring(0, 500) + (response.length > 500 ? '...' : ''), 'debug');
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      let sceneData;
      try {
        sceneData = JSON.parse(extractJsonFromMarkdown(response));
        addLog('JSON –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω', 'success');
      } catch (e) {
        addLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'warning');
        addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D."', 'info');
        // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
        const reformatResponse = await callOpenRouterAPI([
          ...conversationHistory,
          { role: "user", content: "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω—ã D&D." }
        ]);
        addLog(`–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, ${reformatResponse.length} —Å–∏–º–≤–æ–ª–æ–≤):`, 'info');
        addLog(reformatResponse.substring(0, 500) + (reformatResponse.length > 500 ? '...' : ''), 'debug');
        sceneData = JSON.parse(reformatResponse);
        addLog('JSON –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      conversationHistory.push({ role: "assistant", content: response });
      
      // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
      addLog('–†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É...', 'debug');
      renderScene(sceneData);
      showApiStatus('‚úÖ –°—Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
      addLog('–°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞', 'success');
    }
  } catch (error) {
    showApiStatus(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞: ${error.message}`, 'error');
    addLog(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞: ${error.message}`, 'error');
  }
}

// === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ü–µ–Ω—ã ===
function renderScene(data) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
  if (data.player) {
    Object.assign(player, data.player);
  }

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  document.title = data.title || 'D&D –ò–≥—Ä–∞';
  if (document.getElementById('page-title')) {
    document.getElementById('page-title').textContent = data.title || '';
  }
  document.getElementById('game-title').textContent = data.subtitle || data.title || '–ò–≥—Ä–∞';

  // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  document.getElementById('char-name').textContent = player.name || '–ì–µ—Ä–æ–π';

  // HP –∏ MP
  document.getElementById('hp-value').textContent = player.hp ?? '?';
  document.getElementById('mp-value').textContent = player.mp ?? '?';

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ HP –∏ MP)
  const statsPanel = document.getElementById('stats-panel');
  if (statsPanel) {
    statsPanel.innerHTML = '';
    if (data.stats?.visible !== false) {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const statNames = ['str', 'dex', 'con', 'int', 'wis', 'cha'];
      const icons = data.stats?.icons || ['üí™', 'ü§∏', 'üõ°Ô∏è', 'üß†', 'ü¶â', 'üé≠'];
      const labels = data.stats?.labels || ['–°–∏–ª–∞', '–õ–æ–≤–∫–æ—Å—Ç—å', '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ú—É–¥—Ä–æ—Å—Ç—å', '–•–∞—Ä–∏–∑–º–∞'];

      statNames.forEach((stat, i) => {
        const value = player[stat] || 10;
        const mod = Math.floor((value - 10) / 2);
        const sign = mod >= 0 ? '+' : '';
        const item = document.createElement('div');
        item.className = 'stat-item compact';
        item.innerHTML = `
          <div class="stat-name">${icons[i]} ${labels[i]}</div>
          <div class="stat-value-mod">
            <span class="stat-value">${value}</span>
            <span class="stat-mod">${sign}${mod}</span>
          </div>
        `;
        statsPanel.appendChild(item);
      });
    }
  }


  // –ù–∞–≤—ã–∫–∏ (–≤–∫–ª—é—á–∞—è –∞—Ç–∞–∫—É, –∑–æ–ª–æ—Ç–æ, –∑–µ–ª—å—è)
  const abilitiesPanel = document.getElementById('abilities');
  if (abilitiesPanel) {
    abilitiesPanel.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    coreAbilities.forEach(ab => {
      const div = document.createElement('div');
      div.className = 'ability';
      div.innerHTML = `
        <div class="ability-header">
          <span class="ability-icon">${ab.icon}</span>
          <span class="ability-name">${ab.name}</span>
          <span class="ability-cost">${ab.value}</span>
        </div>
        <div class="ability-desc">${ab.desc}</div>
      `;
      abilitiesPanel.appendChild(div);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    (data.abilities || []).forEach(ab => {
      const div = document.createElement('div');
      div.className = 'ability';
      div.innerHTML = `
        <div class="ability-header">
          <span class="ability-icon">${ab.icon}</span>
          <span class="ability-name">${ab.name}</span>
          ${ab.cost ? `<span class="ability-cost">${ab.cost}</span>` : ''}
        </div>
        <div class="ability-desc">${ab.desc}</div>
      `;
      abilitiesPanel.appendChild(div);
    });
  }

  // –ë–æ–π
  const battleArea = document.getElementById('battle-area');
  if (battleArea) {
    if (data.enemy) {
      battleArea.style.display = 'block';
      document.getElementById('enemy-name').textContent = data.enemy.name;
      document.getElementById('enemy-hp').textContent = data.enemy.hp;
      document.getElementById('status-effects').textContent = 
        data.enemy.status?.includes('weakened') ? '‚ö†Ô∏è –û—Å–ª–∞–±–ª–µ–Ω' : '';
    } else {
      battleArea.style.display = 'none';
    }
  }

  // –¢–µ–∫—Å—Ç
  const storyText = document.getElementById('story-text');
  storyText.textContent = '';
  typeWriter(data.text || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.', storyText, () => {
    const choicesContainer = document.getElementById('choices');
    if (choicesContainer) {
      choicesContainer.innerHTML = '';

      (data.choices || []).forEach(choice => {
        const btn = document.createElement('button');
        btn.className = 'choice-btn';
        btn.textContent = choice.text;

        btn.onclick = () => {
          if (sessionInitialized) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            sendChoiceToAI(choice);
          } else {
            // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            addLog('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä', 'error');
            alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Å—Å–∏—é —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!');
          }
        };

        choicesContainer.appendChild(btn);
      });
    }
  });
}

// === –ü–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–æ –±—É–∫–≤–∞–º ===
function typeWriter(text, el, callback) {
  let i = 0;
  const typing = () => {
    if (i < text.length) {
      el.textContent += text.charAt(i);
      i++;
      setTimeout(typing, 30);
    } else if (callback) callback();
  };
  typing();
}