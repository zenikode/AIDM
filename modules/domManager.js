export class DOMManager {
  constructor() {
    this.player = {};
    this.elements = this._cacheElements();
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  _cacheElements() {
    return {
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      pageTitle: document.getElementById('page-title'),
      headerTitle: document.getElementById('header-title'),
      charNameInline: document.getElementById('char-name-inline'),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      statsRowHorizontal: document.getElementById('stats-row-horizontal'),
      
      // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      abilitiesPanel: document.getElementById('abilities'),
      
      // –ë–æ–π
      battleArea: document.getElementById('battle-area'),
      enemyName: document.getElementById('enemy-name'),
      enemyHp: document.getElementById('enemy-hp'),
      statusEffects: document.getElementById('status-effects'),
      enemyOverlay: document.getElementById('enemy-overlay'),
      
      // –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞
      initSessionMain: document.getElementById('init-session-main'),
      storyPrompt: document.getElementById('init-story-prompt'),
      suggestionsDiv: document.getElementById('choices-suggestions'),
      choiceInput: document.getElementById('choice-input'),
      choiceSendBtn: document.getElementById('choice-send-btn'),
      inputHeroName: document.getElementById('input-hero-name'),
      cardContentRow: document.getElementById('card-content-row'),
      
      // DM –ø–∞–Ω–µ–ª—å
      toggleDMBtn: document.getElementById('toggle-dm-panel'),
      dmOverlay: document.getElementById('dm-overlay'),
      
      // API —ç–ª–µ–º–µ–Ω—Ç—ã
      apiKeyInput: document.getElementById('api-key'),
      modelInput: document.getElementById('model-input'),
      consoleLogs: document.getElementById('console-logs'),
      apiStatus: document.getElementById('api-status'),
      clearLogsBtn: document.getElementById('clear-logs'),
      
      // –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
      chatHistory: document.getElementById('chat-history'),
      
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
      welcomeScreen: document.getElementById('welcome-screen'),

      // Clear button
      clearSessionBtn: document.getElementById('clear-session')
    };
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  updatePlayerData(playerData) {
    this.player = { ...this.player, ...playerData };
    this._updatePlayerUI();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–≥—Ä–æ–∫–∞
  _updatePlayerUI() {
    // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (this.elements.charNameInline) {
      this.elements.charNameInline.textContent = this.player.name || '–ì–µ—Ä–æ–π';
    }

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    this._renderStats();
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  _renderStats() {
    if (!this.elements.statsRowHorizontal) return;

    this.elements.statsRowHorizontal.innerHTML = '';

    // HP + MP –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    const hpmpRow = document.createElement('div');
    hpmpRow.className = 'hp-mp-row';
    
    // HP
    const hpDiv = document.createElement('div');
    hpDiv.className = 'stat-horiz-item stat-hpmp';
    hpDiv.innerHTML = `
      <span class="stat-horiz-icon">üíñ</span>
      <span class="stat-horiz-label">HP</span>
      <span class="stat-horiz-hpmp-value hp">${this.player.hp ?? '?'}</span>
    `;
    hpmpRow.appendChild(hpDiv);
    
    // MP
    const mpDiv = document.createElement('div');
    mpDiv.className = 'stat-horiz-item stat-hpmp';
    mpDiv.innerHTML = `
      <span class="stat-horiz-icon">üîµ</span>
      <span class="stat-horiz-label">MP</span>
      <span class="stat-horiz-hpmp-value mp">${this.player.mp ?? '?'}</span>
    `;
    hpmpRow.appendChild(mpDiv);
    
    this.elements.statsRowHorizontal.appendChild(hpmpRow);

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const statNames = ['str', 'dex', 'con', 'int', 'wis', 'cha'];
    const icons = ['üí™', 'ü§∏', 'üõ°Ô∏è', 'üß†', 'ü¶â', 'üé≠'];
    const labels = ['–°–∏–ª–∞', '–õ–æ–≤–∫–æ—Å—Ç—å', '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ú—É–¥—Ä–æ—Å—Ç—å', '–•–∞—Ä–∏–∑–º–∞'];
    
    statNames.forEach((stat, i) => {
      const base = this.player[stat] || 10;
      const mod = Math.floor((base - 10) / 2);
      const total = base + mod;
      const sign = mod >= 0 ? '+' : '';
      
      const statDiv = document.createElement('div');
      statDiv.className = 'stat-horiz-item';
      statDiv.innerHTML = `
        <span class="stat-horiz-icon">${icons[i]}</span>
        <span class="stat-horiz-label">${labels[i]}</span>
        <span class="stat-horiz-formula">(${base}${sign}${mod})<b>${total}</b></span>
      `;
      this.elements.statsRowHorizontal.appendChild(statDiv);
    });
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
  renderAbilities(abilities = []) {
    if (!this.elements.abilitiesPanel) return;

    this.elements.abilitiesPanel.innerHTML = '';

    abilities.forEach(ab => {
      const div = document.createElement('div');
      div.className = 'ability';
      div.innerHTML = `
        <div class="ability-header">
          <span class="ability-icon">${ab.icon}</span>
          <span class="ability-name">${ab.name}</span>
          ${ab.cost ? `<span class="ability-cost">${ab.cost}</span>` : ''}
        </div>
        <div class="ability-desc">${ab.desc}</div>
        ${ab.usage ? `<div class="ability-usage">${ab.usage}</div>` : ''}
      `;
      
      if (ab.usage) {
        div.style.cursor = 'pointer';
        div.title = '–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';
        div.onclick = () => {
          if (this.elements.choiceInput) {
            if (this.elements.choiceInput.value && !this.elements.choiceInput.value.endsWith(' ')) {
              this.elements.choiceInput.value += ' ';
            }
            this.elements.choiceInput.value += ab.usage;
            
          }
        };
      }
      
      this.elements.abilitiesPanel.appendChild(div);
    });
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Ä–∞–≥–∞
  renderEnemy(enemyData) {
    const enemiesContainer = document.getElementById('enemies-container') || this.elements.battleArea.querySelector('.enemies-container');
    const overlay = this.elements.enemyOverlay;

    if (!enemiesContainer || !overlay) return;

    // Clear previous enemies
    enemiesContainer.innerHTML = '';

    let enemies = [];
    if (Array.isArray(enemyData)) {
      enemies = enemyData;
    } else if (enemyData) {
      enemies = [enemyData]; // Wrap single in array
    }

    if (enemies.length > 0) {
      overlay.style.display = 'block';
      
      enemies.forEach(enemy => {
        const enemyBox = document.createElement('div');
        enemyBox.className = 'enemy-box';
        
        enemyBox.innerHTML = `
          <div class="enemy-name">${enemy.name || '–í—Ä–∞–≥'}</div>
          <div class="enemy-hp">HP: <span>${enemy.hp || '?'}</span></div>
          <div class="status-effects">
            ${enemy.status ? enemy.status.map(status => `<span class="status-tag">${status}</span>`).join('') : ''}
          </div>
        `;
        
        enemiesContainer.appendChild(enemyBox);
      });
    } else {
      overlay.style.display = 'none';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  updateTitles(titleData = {}) {
    document.title = titleData.title || 'D&D –ò–≥—Ä–∞';
    
    if (this.elements.pageTitle) {
      this.elements.pageTitle.textContent = titleData.title || '';
    }
    
    if (this.elements.headerTitle) {
      this.elements.headerTitle.textContent = titleData.subtitle || titleData.title || '–ò–≥—Ä–∞';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–±–æ—Ä–∞
  updateChoiceArea(isLoading = false) {
    if (!window.sessionInitialized) {
      this._showInitUI(isLoading);
    } else {
      this._showGameUI(isLoading);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  _showInitUI(isLoading) {
    if (this.elements.initSessionMain) {
      this.elements.initSessionMain.style.display = 'block';
      this.elements.initSessionMain.disabled = !!isLoading;
      this.elements.initSessionMain.textContent = isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
    }
    
    if (this.elements.storyPrompt) {
      this.elements.storyPrompt.style.display = '';
      this.elements.storyPrompt.disabled = !!isLoading;
    }
    
    this._hideGameElements();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å UI –∏–≥—Ä—ã
  _showGameUI(isLoading) {
    if (this.elements.initSessionMain) this.elements.initSessionMain.style.display = 'none';
    
    if (this.elements.storyPrompt) {
      this.elements.storyPrompt.style.display = 'none';
      this.elements.storyPrompt.disabled = false;
    }
    
    this._showGameElements(isLoading);
  }

  // –°–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  _hideGameElements() {
    if (this.elements.suggestionsDiv) this.elements.suggestionsDiv.style.display = 'none';
    if (this.elements.choiceInput) this.elements.choiceInput.style.display = 'none';
    if (this.elements.choiceSendBtn) this.elements.choiceSendBtn.style.display = 'none';
    if (this.elements.inputHeroName) this.elements.inputHeroName.style.display = 'none';
    if (this.elements.cardContentRow) this.elements.cardContentRow.classList.add('hidden');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  _showGameElements(isLoading) {
    if (this.elements.suggestionsDiv) this.elements.suggestionsDiv.style.display = '';
    if (this.elements.choiceInput) {
      this.elements.choiceInput.style.display = '';
      this.elements.choiceInput.disabled = !!isLoading;
    }
    if (this.elements.choiceSendBtn) {
      this.elements.choiceSendBtn.style.display = '';
      this.elements.choiceSendBtn.disabled = !!isLoading;
      this.elements.choiceSendBtn.textContent = isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
    if (this.elements.inputHeroName) this.elements.inputHeroName.style.display = '';
    if (this.elements.cardContentRow) this.elements.cardContentRow.classList.remove('hidden');
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—ã–±–æ—Ä–∞
  renderChoices(choices = []) {
    if (!this.elements.suggestionsDiv) return;

    this.elements.suggestionsDiv.innerHTML = '';
    
    choices.forEach(choice => {
      const btn = document.createElement('button');
      btn.className = 'suggestion-btn';
      btn.textContent = choice.text;
      btn.onclick = () => {
        if (this.elements.choiceInput) {
          this.elements.choiceInput.value = choice.text;
          
        }
      };
      this.elements.suggestionsDiv.appendChild(btn);
    });

    if (this.elements.choiceInput) {
      this.elements.choiceInput.disabled = false;
    }
    
    if (this.elements.choiceSendBtn) {
      this.elements.choiceSendBtn.disabled = false;
      this.elements.choiceSendBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—ã–±–æ—Ä–∞
  clearChoices() {
    if (this.elements.suggestionsDiv) {
      this.elements.suggestionsDiv.innerHTML = '';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∞
  getInputValue() {
    return this.elements.choiceInput ? this.elements.choiceInput.value.trim() : '';
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
  clearInput() {
    if (this.elements.choiceInput) {
      this.elements.choiceInput.value = '';
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setChoiceHandlers(onSendAction, onInputKeyDown) {
    if (this.elements.choiceSendBtn && this.elements.choiceInput) {
      this.elements.choiceSendBtn.onclick = onSendAction;
      this.elements.choiceInput.onkeydown = onInputKeyDown;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ DM –ø–∞–Ω–µ–ª–∏
  setDMPanelHandlers() {
    if (this.elements.toggleDMBtn && this.elements.dmOverlay) {
      this.elements.toggleDMBtn.onclick = () => {
        this.elements.dmOverlay.style.display = 'flex';
      };
      
      this.elements.dmOverlay.onclick = (e) => {
        if (e.target === this.elements.dmOverlay) {
          this.elements.dmOverlay.style.display = 'none';
        }
      };
    }

    // Clear session button handler will be set in game.js
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
  appendPlayerMessage(actionText) {
    if (!this.elements.chatHistory) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-player';
    messageDiv.innerHTML = `<div class="message-text">–î–µ–π—Å—Ç–≤–∏–µ: ${actionText}</div>`;
    
    this.elements.chatHistory.appendChild(messageDiv);
    
    // Scroll to align message at top
    messageDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    // Track in global chatMessages
    if (window.chatMessages) {
      window.chatMessages.push({ type: 'player', content: actionText });
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ AI –≤ –∏—Å—Ç–æ—Ä–∏—é
  appendAIMessage(sceneData, callback) {
    if (!this.elements.chatHistory) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-ai';
    
    // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    let content = `<div class="message-text" id="temp-text-${Date.now()}"></div>`; // –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    
    messageDiv.innerHTML = content;
    this.elements.chatHistory.appendChild(messageDiv);
    
    // Scroll to align message at top of screen before typing
    messageDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    const textEl = messageDiv.querySelector('.message-text');
    if (sceneData.text && textEl) {
      typeWriter(sceneData.text, textEl, () => {
        // Optional scroll after typing if needed
        messageDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
        if (callback) callback();
      });
    } else {
      if (callback) callback();
    }

    // Track in global chatMessages
    if (window.chatMessages && sceneData.text) {
      window.chatMessages.push({ type: 'ai', content: sceneData.text });
    }
  }

  // Restore chat history from saved messages (no animation)
  restoreChatHistory(messages) {
    if (!this.elements.chatHistory || !messages) return;

    this.elements.chatHistory.innerHTML = '';

    messages.forEach((msg, index) => {
      const messageDiv = document.createElement('div');
      if (msg.type === 'player') {
        messageDiv.className = 'message-player';
        messageDiv.innerHTML = `<div class="message-text">–î–µ–π—Å—Ç–≤–∏–µ: ${msg.content}</div>`;
      } else if (msg.type === 'ai') {
        messageDiv.className = 'message-ai';
        messageDiv.innerHTML = `<div class="message-text">${msg.content}</div>`;
      }
      this.elements.chatHistory.appendChild(messageDiv);
      
      // Scroll last message to top
      if (index === messages.length - 1) {
        messageDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ)
  clearChatHistory() {
    if (this.elements.chatHistory) {
      this.elements.chatHistory.innerHTML = '';
    }
    if (window.chatMessages) {
      window.chatMessages = [];
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
  showWelcome() {
    if (this.elements.welcomeScreen) {
      this.elements.welcomeScreen.classList.remove('hidden');
      this.elements.welcomeScreen.style.display = 'flex';
    }
  }

  // –°–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
  hideWelcome() {
    if (this.elements.welcomeScreen) {
      this.elements.welcomeScreen.classList.add('hidden');
      setTimeout(() => {
        this.elements.welcomeScreen.style.display = 'none';
      }, 500); // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
    }
  }

  // New method to toggle clear session button visibility
  toggleClearButton(show) {
    const clearBtn = document.getElementById('clear-session');
    if (clearBtn) {
      clearBtn.style.display = show ? 'block' : 'none';
    }
  }
}


function typeWriter(text, el, callback) {
  let i = 0;
  el.textContent = '';
  const typing = () => {
    if (i < text.length) {
      el.textContent += text.charAt(i);
      i++;
      setTimeout(typing, 30);
    } else if (callback) callback();
  };
  typing();
}
